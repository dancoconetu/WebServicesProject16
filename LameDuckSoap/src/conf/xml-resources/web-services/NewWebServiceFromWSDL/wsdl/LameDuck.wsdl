<?xml version="1.0" encoding="UTF-8"?>
<definitions name="LameDuck" targetNamespace="http://LameDuck.ws"
    xmlns="http://schemas.xmlsoap.org/wsdl/"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://LameDuck.ws" xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
    <types>
        <xsd:schema targetNamespace="http://LameDuck.ws" xmlns:tns="http://LameDuck.ws">
            <xsd:complexType name="flightInformation">
                <xsd:sequence>
                    <xsd:element name="bookingNo" type="xsd:string"></xsd:element>
                    <xsd:element name="price" type="xsd:int"></xsd:element>
                    <xsd:element name="nameAirline" type="xsd:string"></xsd:element>
                    <xsd:element name="flight" type="tns:flight"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="flight">
                <xsd:sequence>
                    <xsd:element name="startAirport" type="xsd:string"></xsd:element>
                    <xsd:element name="destination" type="xsd:string"></xsd:element>
                    <xsd:element name="carrier" type="xsd:string"></xsd:element>
                    <xsd:element name="liftOffTime" type="xsd:date"></xsd:element>
                    <xsd:element name="landingTime" type="xsd:date"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getFlightsInput">
                <xsd:sequence>
                    <xsd:element name="flightDate" type="xsd:date"></xsd:element>
                    <xsd:element name="startAirport" type="xsd:string"></xsd:element>
                    <xsd:element name="destination" type="xsd:string"></xsd:element>
                    
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getFlightsOutput">
                <xsd:sequence>
                    <xsd:element name="flightInformation" type="tns:flightInformation" maxOccurs="unbounded" minOccurs="0"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="getFlighsInput" type="tns:getFlightsInput"></xsd:element>
            <xsd:element name="getFlightsOutput" type="tns:getFlightsOutput"></xsd:element>
            <xsd:complexType name="bookFlightInput">
                <xsd:sequence>
                    <xsd:element name="bookingNo" type="xsd:string"></xsd:element>
                    <xsd:element name="creditCardDetails" type="tns:creditCardDetails"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="creditCardDetails">
                <xsd:sequence>
                    <xsd:element name="holdersName" type="xsd:string"></xsd:element>
                    <xsd:element name="expirityDate" type="tns:expirityDateType"></xsd:element>
                    <xsd:element name="cardNumber" type="xsd:string"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="bookFlightInput" type="tns:bookFlightInput"></xsd:element>
            <xsd:element name="bookFlightOutput" type="xsd:boolean"></xsd:element>
            <xsd:element name="bookFlightFault" type="xsd:string"></xsd:element>
            <xsd:element name="cancelFlightFault" type="xsd:string"></xsd:element>
            <xsd:complexType name="cancelFlightInput">
                <xsd:sequence>
                    <xsd:element name="bookingNo" type="xsd:string"></xsd:element>
                    <xsd:element name="creditCardDetails" type="tns:creditCardDetails"></xsd:element>
                    <xsd:element name="price" type="xsd:int"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="cancelFlightInput" type="tns:cancelFlightInput"></xsd:element>
            <xsd:element name="cancelFlightOutput" type="xsd:boolean"></xsd:element>
            <xsd:complexType name="expirityDateType">
                <xsd:sequence>
                    <xsd:element name="month" type="xsd:int"></xsd:element>
                    <xsd:element name="year" type="xsd:int"></xsd:element>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:schema>
    </types>
    <message name="LameDuckOperationRequest">
        <part name="getFlightsInput" element="tns:getFlighsInput"/>
    </message>
    <message name="LameDuckOperationResponse">
        <part name="getFlightsOutput" element="tns:getFlightsOutput"/>
    </message>
    <message name="LameDuckOperationRequest1">
        <part name="input" element="tns:bookFlightInput"/>
    </message>
    <message name="LameDuckOperationResponse1">
        <part name="output" element="tns:bookFlightOutput"/>
    </message>
    <message name="BookFlightFaultMessage">
        <part name="BookFlightFault" element="tns:bookFlightFault"/>
    </message>
    <message name="CancelFlightFaultMessage">
        <part name="CancelFlightFault" element="tns:cancelFlightFault"/>
    </message>
    <message name="LameDuckOperationRequest2">
        <part name="cancelFlightInput" element="tns:cancelFlightInput"/>
    </message>
    <message name="LameDuckOperationResponse2">
        <part name="cancelFlightOutput" element="tns:cancelFlightOutput"/>
    </message>
    <portType name="LameDuckPortType">
        <operation name="getFlights">
            <input name="input1" message="tns:LameDuckOperationRequest"/>
            <output name="output1" message="tns:LameDuckOperationResponse"/>
        </operation>
        <operation name="bookFlight">
            <input name="input2" message="tns:LameDuckOperationRequest1"/>
            <output name="output2" message="tns:LameDuckOperationResponse1"/>
            <fault name="bookFlightFault" message="tns:BookFlightFaultMessage"/>
        </operation>
        <operation name="cancelFlight">
            <input name="input3" message="tns:LameDuckOperationRequest2"/>
            <output name="output3" message="tns:LameDuckOperationResponse2"/>
            <fault name="cancelFlightFault" message="tns:CancelFlightFaultMessage"/>
        </operation>
    </portType>
    <binding name="LameDuckPortTypeBinding" type="tns:LameDuckPortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="getFlights">
            <soap:operation/>
            <input name="input1">
                <soap:body use="literal"/>
            </input>
            <output name="output1">
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="bookFlight">
            <soap:operation/>
            <input name="input2">
                <soap:body use="literal"/>
            </input>
            <output name="output2">
                <soap:body use="literal"/>
            </output>
            <fault name="bookFlightFault">
                <soap:fault name="bookFlightFault" use="literal"/>
            </fault>
        </operation>
        <operation name="cancelFlight">
            <soap:operation/>
            <input name="input3">
                <soap:body use="literal"/>
            </input>
            <output name="output3">
                <soap:body use="literal"/>
            </output>
            <fault name="cancelFlightFault">
                <soap:fault name="cancelFlightFault" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="LameDuckService">
        <port name="LameDuckPortTypeBindingPort" binding="tns:LameDuckPortTypeBinding">
            <soap:address location="http://localhost:${HttpDefaultPort}/service"/>
        </port>
        <port name="LameDuckPortTypeBindingPort1" binding="tns:LameDuckPortTypeBinding">
            <soap:address location="http://localhost:${HttpDefaultPort}/service"/>
        </port>
    </service>
    <plnk:partnerLinkType name="LameDuck">
        <!-- A partner link type is automatically generated when a new port type is added. Partner link types are used by BPEL processes. 
In a BPEL process, a partner link represents the interaction between the BPEL process and a partner service. Each partner link is associated with a partner link type.
A partner link type characterizes the conversational relationship between two services. The partner link type can have one or two roles.-->
        <plnk:role name="LameDuckPortTypeRole" portType="tns:LameDuckPortType"/>
    </plnk:partnerLinkType>
</definitions>
