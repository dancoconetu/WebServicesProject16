<?xml version='1.0' encoding='UTF-8'?><!-- Published by JAX-WS RI (http://jax-ws.java.net). RI's version is Metro/2.3.1-b419 (branches/2.3.1.x-7937; 2014-08-04T08:11:03+0000) JAXWS-RI/2.2.10-b140803.1500 JAXWS-API/2.2.11 JAXB-RI/2.2.10-b140802.1033 JAXB-API/2.2.12-b140109.1041 svn-revision#unknown. --><definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://LameDuck.ws" xmlns:plnk="http://docs.oasis-open.org/wsbpel/2.0/plnktype" xmlns:ns="http://types.fastmoney.imm.dtu.dk" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" name="LameDuck" targetNamespace="http://LameDuck.ws">
    <types>
        <xsd:schema xmlns:tns="http://LameDuck.ws" targetNamespace="http://LameDuck.ws">
            <!-- <xsd:import namespace="http://types.fastmoney.imm.dtu.dk" schemaLocation="http://fastmoney.imm.dtu.dk:8080/BankService?xsd=1"/>
           -->
         <xsd:complexType name="flightInformation">
                <xsd:sequence>
                    <xsd:element name="bookingNo" type="xsd:string"/>
                    <xsd:element name="price" type="xsd:int"/>
                    <xsd:element name="nameAirline" type="xsd:string"/>
                    <xsd:element name="flight" type="tns:flight"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="flight">
                <xsd:sequence>
                    <xsd:element name="startAirport" type="xsd:string"/>
                    <xsd:element name="destination" type="xsd:string"/>
                    <xsd:element name="carrier" type="xsd:string"/>
                    <xsd:element name="liftOffTime" type="xsd:date"/>
                    <xsd:element name="landingTime" type="xsd:date"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getFlightsInput">
                <xsd:sequence>
                    <xsd:element name="flightDate" type="xsd:date"/>
                    <xsd:element name="startAirport" type="xsd:string"/>
                    <xsd:element name="destination" type="xsd:string"/>
                    
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="getFlightsOutput">
                <xsd:sequence>
                    <xsd:element name="flightInformation" type="tns:flightInformation" maxOccurs="unbounded" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="getFlighsInputElement" type="tns:getFlightsInput"/>
            <xsd:element name="getFlightsOutputElement" type="tns:getFlightsOutput"/>
            <xsd:complexType name="bookFlightInput">
                <xsd:sequence>
                    <xsd:element name="bookingNo" type="xsd:string"/>
                    <xsd:element name="creditCardDetails" type="tns:creditCardDetails"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="creditCardDetails">
                <xsd:sequence>
                    <xsd:element name="holdersName" type="xsd:string"/>
                    <xsd:element name="cardNumber" type="xsd:string"/>
                    <xsd:element name="expirationDate" type="tns:expirationDate"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="bookFlightInputElement" type="tns:bookFlightInput"/>
            <xsd:element name="bookFlightOutputElement" type="xsd:boolean"/>
            <xsd:element name="bookFlightFaultElement" type="xsd:string"/>
            <xsd:element name="cancelFlightFaultElement" type="xsd:string"/>
            <xsd:complexType name="cancelFlightInput">
                <xsd:sequence>
                    <xsd:element name="bookingNo" type="xsd:string"/>
                    <xsd:element name="creditCardDetails" type="tns:creditCardDetails"/>
                    <xsd:element name="price" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="cancelFlightInputElement" type="tns:cancelFlightInput"/>
            <xsd:element name="cancelFlightOutputElement" type="xsd:boolean"/>
            <xsd:complexType name="expirationDate">
                <xsd:sequence>
                    <xsd:element name="year" type="xsd:int"/>
                    <xsd:element name="month" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:schema>
    </types>
    <message name="LameDuckOperationRequest">
        <part name="getFlightsInput" element="tns:getFlighsInputElement"/>
    </message>
    <message name="LameDuckOperationResponse">
        <part name="getFlightsOutput" element="tns:getFlightsOutputElement"/>
    </message>
    <message name="LameDuckOperationRequest1">
        <part name="input" element="tns:bookFlightInputElement"/>
    </message>
    <message name="LameDuckOperationResponse1">
        <part name="output" element="tns:bookFlightOutputElement"/>
    </message>
    <message name="BookFlightFaultMessage">
        <part name="BookFlightFault" element="tns:bookFlightFaultElement"/>
    </message>
    <message name="CancelFlightFaultMessage">
        <part name="CancelFlightFault" element="tns:cancelFlightFaultElement"/>
    </message>
    <message name="LameDuckOperationRequest2">
        <part name="cancelFlightInput" element="tns:cancelFlightInputElement"/>
    </message>
    <message name="LameDuckOperationResponse2">
        <part name="cancelFlightOutput" element="tns:cancelFlightOutputElement"/>
    </message>
    <message name="LameDuckOperationRequest4">
        <part name="input" element="tns:bookFlightInputElement"/>
    </message>
    <message name="LameDuckOperationResponse4">
        <part name="output" element="tns:bookFlightOutputElement"/>
    </message>
    <portType name="LameDuckPortType">
        <operation name="getFlights">
            <input name="input1" message="tns:LameDuckOperationRequest"/>
            <output name="output1" message="tns:LameDuckOperationResponse"/>
        </operation>
        <operation name="cancelFlight">
            <input name="input3" message="tns:LameDuckOperationRequest2"/>
            <output name="output3" message="tns:LameDuckOperationResponse2"/>
            <fault name="cancelFlightFault" message="tns:CancelFlightFaultMessage"/>
        </operation>
        <operation name="bookFlight">
            <input name="input2" message="tns:LameDuckOperationRequest4"/>
            <output name="output2" message="tns:LameDuckOperationResponse4"/>
            <fault name="BookFlightFault" message="tns:BookFlightFaultMessage"/>
        </operation>
    </portType>
    <binding name="LameDuckPortTypeBinding" type="tns:LameDuckPortType">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="getFlights">
            <soap:operation/>
            <input name="input1">
                <soap:body use="literal"/>
            </input>
            <output name="output1">
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="cancelFlight">
            <soap:operation/>
            <input name="input3">
                <soap:body use="literal"/>
            </input>
            <output name="output3">
                <soap:body use="literal"/>
            </output>
            <fault name="cancelFlightFault">
                <soap:fault name="cancelFlightFault" use="literal"/>
            </fault>
        </operation>
        <operation name="bookFlight">
            <soap:operation/>
            <input name="input2">
                <soap:body use="literal"/>
            </input>
            <output name="output2">
                <soap:body use="literal"/>
            </output>
            <fault name="BookFlightFault">
                <soap:fault name="BookFlightFault" use="literal"/>
            </fault>
        </operation>
    </binding>
    <service name="LameDuckService">
        <port name="LameDuckPortTypeBindingPort" binding="tns:LameDuckPortTypeBinding">
            <soap:address location="http://localhost:9090/LameDuckSoap/LameDuckService"/>
        </port>
    </service>
    <plnk:partnerLinkType name="LameDuck">
        <!-- A partner link type is automatically generated when a new port type is added. Partner link types are used by BPEL processes. 
In a BPEL process, a partner link represents the interaction between the BPEL process and a partner service. Each partner link is associated with a partner link type.
A partner link type characterizes the conversational relationship between two services. The partner link type can have one or two roles.-->
        <plnk:role name="LameDuckPortTypeRole" portType="tns:LameDuckPortType"/>
    </plnk:partnerLinkType>
</definitions>